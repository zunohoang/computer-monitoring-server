// <auto-generated />
using System;
using ComputerMonitoringServerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComputerMonitoringServerAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251027135109_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Alert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("severity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("alerts");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Attempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("IpAd")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_ad");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<long>("Sbd")
                        .HasColumnType("bigint")
                        .HasColumnName("sbd");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("RoomId");

                    b.HasIndex("Sbd");

                    b.ToTable("attempt");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("alert_id");

                    b.Property<long?>("AttemptId")
                        .HasColumnType("bigint")
                        .HasColumnName("attempt_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.Property<long?>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnName("process_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("Type");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Contest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("contests");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.ContestProcessBlacklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnName("process_id");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProcessId");

                    b.ToTable("contest_process_blacklist");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.ContestSbd", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<long>("Sbd")
                        .HasColumnType("bigint")
                        .HasColumnName("sbd");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("Sbd")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("contest_sbd");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Meta")
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("images");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttemptId")
                        .HasColumnType("bigint")
                        .HasColumnName("attempt_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("ContestId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoomId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AttemptId")
                        .HasColumnType("bigint")
                        .HasColumnName("attempt_id");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("Pid")
                        .HasColumnType("integer")
                        .HasColumnName("pid");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("Name");

                    b.ToTable("process");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.ProcessBlacklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("process_blacklists");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_code");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<long>("ContestId")
                        .HasColumnType("bigint")
                        .HasColumnName("contest_id");

                    b.Property<DateTime>("RgEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rg_end_time");

                    b.Property<DateTime>("RgStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rg_start_time");

                    b.HasKey("Id");

                    b.HasIndex("AccessCode")
                        .IsUnique();

                    b.HasIndex("ContestId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<long>("NewColumn")
                        .HasColumnType("bigint")
                        .HasColumnName("new_column");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Violation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("alert_id");

                    b.Property<long>("AttemptId")
                        .HasColumnType("bigint")
                        .HasColumnName("attempt_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("Handled")
                        .HasColumnType("boolean")
                        .HasColumnName("handled");

                    b.Property<DateTime>("HandledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("handled_at");

                    b.Property<long>("HandledBy")
                        .HasColumnType("bigint")
                        .HasColumnName("handled_by");

                    b.Property<long>("LogEndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("log_end_time");

                    b.Property<long>("LogStartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("log_start_time");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("severity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HandledBy");

                    b.ToTable("violations");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Attempt", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("ComputerMonitoringServerAPI.Models.ContestSbd", "ContestSbdNavigation")
                        .WithMany()
                        .HasForeignKey("Sbd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("ContestSbdNavigation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.AuditLog", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertId");

                    b.HasOne("ComputerMonitoringServerAPI.Models.Attempt", "Attempt")
                        .WithMany()
                        .HasForeignKey("AttemptId");

                    b.HasOne("ComputerMonitoringServerAPI.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ComputerMonitoringServerAPI.Models.Process", "ProcessNavigation")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.Navigation("Alert");

                    b.Navigation("Attempt");

                    b.Navigation("Image");

                    b.Navigation("ProcessNavigation");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Contest", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.ContestProcessBlacklist", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.ProcessBlacklist", "ProcessBlacklist")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("ProcessBlacklist");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.ContestSbd", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Message", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Attempt", "Attempt")
                        .WithMany()
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Contest");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Process", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Attempt", "Attempt")
                        .WithMany()
                        .HasForeignKey("AttemptId");

                    b.Navigation("Attempt");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Room", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ComputerMonitoringServerAPI.Models.Violation", b =>
                {
                    b.HasOne("ComputerMonitoringServerAPI.Models.Alert", "Alert")
                        .WithMany()
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.Attempt", "Attempt")
                        .WithMany()
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ComputerMonitoringServerAPI.Models.User", "HandledByNavigation")
                        .WithMany()
                        .HasForeignKey("HandledBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("Attempt");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("HandledByNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
