name: CI/CD Pipeline - Deploy to VPS

# Trigger workflow khi push l√™n branch main
on:
  push:
    branches:
      - main
  workflow_dispatch: # Cho ph√©p ch·∫°y manual t·ª´ GitHub UI

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/computer-monitoring-api
  DOCKER_TAG: ${{ github.sha }}

jobs:
  # ====================================
  # Job 1: Build v√† Test
  # ====================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: üì¶ Restore dependencies
        run: dotnet restore ComputerMonitoringServerAPI/ComputerMonitoringServerAPI.csproj

      - name: üèóÔ∏è Build project
        run: dotnet build ComputerMonitoringServerAPI/ComputerMonitoringServerAPI.csproj --configuration Release --no-restore

      # Optional: Uncomment n·∫øu b·∫°n c√≥ unit tests
      # - name: üß™ Run tests
      #   run: dotnet test --no-build --verbosity normal

  # ====================================
  # Job 2: Build v√† Push Docker Image
  # ====================================
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üè∑Ô∏è Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: üê≥ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  # ====================================
  # Job 3: Deploy l√™n VPS
  # ====================================
  deploy-to-vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push-docker

    steps:
      - name: üì• Checkout code (ƒë·ªÉ l·∫•y docker-compose.yml)
        uses: actions/checkout@v4

      - name: üöÄ Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          debug: true
          script: |
            set -x  # Print commands (for debugging)

            # Ki·ªÉm tra Docker v√† Docker Compose
            echo "Checking Docker installation..."
            if ! docker --version; then
              echo "‚ùå Docker not found"
              exit 1
            fi

            if ! docker compose version; then
              echo "‚ùå Docker Compose not found"
              exit 1
            fi

            # T·∫°o th∆∞ m·ª•c cho project n·∫øu ch∆∞a c√≥
            mkdir -p ~/computer-monitoring-api
            cd ~/computer-monitoring-api

            # Pull code m·ªõi nh·∫•t (ƒë·ªÉ l·∫•y docker-compose.yml)
            if [ -d ".git" ]; then
              echo "Git repository exists, pulling latest changes..."
              git pull origin main || {
                echo "‚ö†Ô∏è Git pull failed, trying to re-clone..."
                cd ..
                rm -rf computer-monitoring-api
                mkdir -p computer-monitoring-api
                cd computer-monitoring-api
                git clone https://github.com/${{ github.repository }}.git .
              }
            else
              echo "Git repository not found, cloning..."
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # T·∫°o file .env n·∫øu ch∆∞a c√≥
            if [ ! -f ".env" ]; then
              echo "Creating .env file..."
              cat > .env << 'EOF'
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=latest
            POSTGRES_DB=ComputerMonitoring
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            ASPNETCORE_ENVIRONMENT=Production
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_ISSUER=ComputerMonitoringAPI
            JWT_AUDIENCE=ComputerMonitoringClients
            JWT_EXPIRY_MINUTES=60
            EOF
              echo "‚úÖ .env file created"
              echo "Verifying .env file..."
              if [ -f ".env" ]; then
                echo "‚úÖ .env file exists"
                echo "File size: $(wc -c < .env) bytes"
              else
                echo "‚ùå Failed to create .env file"
                exit 1
              fi
            else
              echo "‚úÖ .env file already exists"
            fi

            # Pull Docker image m·ªõi nh·∫•t
            echo "Pulling latest Docker image..."
            if ! docker pull ${{ env.DOCKER_IMAGE }}:latest; then
              echo "‚ùå Failed to pull Docker image"
              exit 1
            fi
            echo "‚úÖ Docker image pulled successfully"

            # D·ª´ng v√† x√≥a container c≈© (n·∫øu c√≥)
            echo "Stopping old containers..."
            docker compose down 2>/dev/null || echo "No containers to stop"

            # Kh·ªüi ƒë·ªông l·∫°i v·ªõi image m·ªõi
            echo "Starting new containers..."
            if ! docker compose up -d; then
              echo "‚ùå Failed to start containers"
              echo "Showing logs for debugging:"
              docker compose logs --tail=100
              exit 1
            fi
            echo "‚úÖ Containers started successfully"

            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ container kh·ªüi ƒë·ªông
            echo "Waiting for containers to initialize..."
            sleep 5

            # X√≥a c√°c image c≈© kh√¥ng d√πng n·ªØa (gi·∫£i ph√≥ng dung l∆∞·ª£ng)
            echo "Cleaning up old images..."
            docker image prune -af --filter "until=24h" 2>/dev/null || echo "No old images to clean"

            # Ki·ªÉm tra tr·∫°ng th√°i
            echo "Checking container status..."
            docker compose ps

            # Hi·ªÉn th·ªã logs g·∫ßn nh·∫•t
            echo "Recent logs:"
            docker compose logs --tail=50

            # Ki·ªÉm tra xem container c√≥ ch·∫°y kh√¥ng
            if docker compose ps | grep -q "Up"; then
              echo "‚úÖ Containers are running successfully"
            else
              echo "‚ö†Ô∏è Warning: No containers are running"
              echo "Full logs:"
              docker compose logs
              exit 1
            fi

      - name: ‚úÖ Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            cd ~/computer-monitoring-api

            # Ch·ªù container kh·ªüi ƒë·ªông (t·ªëi ƒëa 60 gi√¢y)
            echo "Waiting for containers to be healthy..."
            for i in {1..12}; do
              if docker compose ps | grep -q "healthy\|Up"; then
                echo "‚úÖ Containers are running!"
                docker compose ps
                exit 0
              fi
              echo "Waiting... ($i/12)"
              sleep 5
            done

            echo "‚ö†Ô∏è Warning: Containers might not be fully healthy yet"
            docker compose ps
            docker compose logs --tail=100

  # ====================================
  # Job 4: Notification (Optional)
  # ====================================
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy-to-vps
    if: always()

    steps:
      - name: üì¢ Notify deployment status
        run: |
          if [ "${{ needs.deploy-to-vps.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Application deployed to VPS: ${{ secrets.VPS_IP }}"
            echo "üê≥ Docker image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
          else
            echo "‚ùå Deployment failed!"
            echo "Please check the logs above for more details."
            exit 1
          fi
